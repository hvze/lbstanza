;See License.txt for details about licensing.

defpackage stz/main :
   import core
   import collections
   import reader
   import stz/compiler
   import stz/arg-parser
   import stz/params
   
   ;Macro Packages
   import stz/langs
   import stz/renamer-lang
   import stz/resolver-lang
   import stz/serializer-lang

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version () :
   val version = string-join(STANZA-VERSION, ".")
   println(ABOUT-MSG % [version])

;============================================================
;================== Config File Parsing =====================
;============================================================
defsyntax stanza-config :
   defn ut (x) :
      unwrap-token(x)

   defn first-info (form) -> Maybe<FileInfo> :
      match(form) :
         (form:Token) : One(info(form))
         (form:List) : first(first-info, form)
         (form) : None()

   defn PE (form, msg) :
      throw $ match(value?(first-info(form))) :
         (info:FileInfo) : Exception("%_: %_" % [info, msg])
         (info:False) : Exception(msg)

   defrule :
      sym = (?x) when ut(x) is Symbol : ut(x)
      string = (?x) when ut(x) is String : ut(x)
      string! = (?s:#string) : s
      string! != () : PE(form, "Expected a string here.")

      platform! = (?x:#sym) :
         try : to-platform(x)
         catch (e:Exception) : PE(form, e)
      platform! != () :
         PE(form, "Expected a platform here.")

      entry = (install-dir = ?path:#string!) :
         STANZA-INSTALL-DIR = path
      entry = (platform = ?p:#platform!) :
         OUTPUT-PLATFORM = p
      entry = (pkg-dirs = (?paths:#string ...)) :
         STANZA-PKG-DIRS = append(paths, STANZA-PKG-DIRS)
      entry = (fast-pkg-dirs = (?paths:#string ...)) :
         STANZA-FAST-PKG-DIRS = append(paths, STANZA-FAST-PKG-DIRS)
      entry != () :
         PE(form, "Invalid configuration rule.")

defn to-platform (s) :
   val p = to-symbol(s)
   if not contains?([`os-x, `linux, `windows], p) :
      throw $ Exception("%_ is not a supported platform." % [p])
   p   

defn read-config-file () :
   ;Extract parameters from config file
   label break :
      defn extract-from-file (filename:String) :
         if file-exists?(filename) :
            val forms = read-file(filename)
            with-syntax(stanza-config) :
               match-syntax(forms) :
                  (?e:#entry ...) : false
            break(false)

      defn extract-from-env (name:String) :
         match(get-env(name)) :
            (path:String) : extract-from-file(norm-path("%_/.stanza" % [path]))
            (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

   ;Verify parameters
   val license-file = norm-path("%_/License.txt" % [STANZA-INSTALL-DIR])
   if not file-exists?(license-file) :
      throw $ Exception(STANZA-LICENSE-MSG % [STANZA-INSTALL-DIR, license-file])

val STANZA-LICENSE-MSG = "Stanza install directory is set to %_, but could not locate license file at %_."   

;============================================================
;================== Compilation =============================
;============================================================
defn stanza-file (path:String) :
   norm-path(path % [STANZA-INSTALL-DIR])
      
defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflags:False|String) :
   ;Get list of all files and flags
   val all-files = cat-all $ [
      [asmfile,
       stanza-file("%_/runtime/driver.c")]
      ccfiles]
   val all-flags = match(ccflags) :
      (ccflags:False) : ["-lm"]
      (ccflags:String) : ["-lm" ccflags]
   val cc-name = switch flag-defined? :
      `PLATFORM-WINDOWS : "gcc"
      `PLATFORM-LINUX : "cc"
      `PLATFORM-OS-X : "cc"
   val platform-flags = switch flag-defined? :
      `PLATFORM-WINDOWS : ["-D PLATFORM_WINDOWS"]
      `PLATFORM-LINUX : ["-D PLATFORM_LINUX"]
      `PLATFORM-OS-X : ["-D PLATFORM_OS_X"]
      
   ;Create command
   defn escape (x) : "\"%_\"" % [x]
   val cmd = to-string $
      "%_ -std=c99 %* -o %_ %* %*" % [
         cc-name,
         join(seq(escape, all-files), " "),
         escape(outfile),
         join(all-flags, " "),
         join(platform-flags, " ")]
   if has-flag?(parsed, "verbose") :
      println(cmd)

   ;Call system compiler
   call-system(cmd)

defn compile (parsed:ParseResult) :
   ;Set up configuration
   read-config-file()

   ;Verify input files
   if empty?(args(parsed)) :
      throw $ Exception("No input files given.")
   if (not has-flag?(parsed, "s")) and (not has-flag?(parsed, "o")) and (not has-flag?(parsed, "pkg")) :
      throw $ Exception("Stanza compile command requires at least one of the following flags: -s, -o, or -pkg.")
   if length(multiple?(parsed, "pkg", List())) > 1 :
      throw $ Exception("Multiple pkg output directories given.")

   ;Flag settings   
   if has-flag?(parsed, "optimize") :
      add-flag(`OPTIMIZE)
   if has-flag?(parsed, "verbose") :
      add-flag(`VERBOSE)
   if flag-defined?(`OPTIMIZE) :
      if has-flag?(parsed, "pkg-path") :
         STANZA-FAST-PKG-DIRS = append(multiple(parsed, "pkg-path"), STANZA-FAST-PKG-DIRS)
      else :
         STANZA-FAST-PKG-DIRS = cons(".", STANZA-FAST-PKG-DIRS)
   else :
      if has-flag?(parsed, "pkg-path") :
         STANZA-PKG-DIRS = append(multiple(parsed, "pkg-path"), STANZA-PKG-DIRS)
      else :
         STANZA-PKG-DIRS = cons(".", STANZA-PKG-DIRS)
   for flag in multiple?(parsed, "flags", List()) do :
      add-flag(to-symbol(flag))
   
   ;Platform settings
   match(flag?(parsed, "platform")) :
      (p:String) : OUTPUT-PLATFORM = to-platform(p)
      (p:False) : false

   ;Platform flag settings
   add-flag $ switch {OUTPUT-PLATFORM == _} :
      `os-x : `PLATFORM-OS-X
      `linux : `PLATFORM-LINUX
      `windows : `PLATFORM-WINDOWS

   ;Compute directory to save pkg files
   val pkg-dir =
      if has-flag?(parsed, "pkg") :
         val dirs = multiple(parsed, "pkg")
         if empty?(dirs) : "."
         else : head(dirs)

   ;Compute filename of output file, and whether it is temporary
   val [asmfile, temporary?] =
      if has-flag?(parsed, "s") :
         [single(parsed, "s"), false]
      else if has-flag?(parsed, "o") :
         [to-string("%_.s" % [gensym("tmp")]), true]
      else :
         [false, false]

   ;Compile to assembly
   compile(args(parsed), asmfile, pkg-dir)

   ;Call C compiler
   if has-flag?(parsed, "o") :
      val outfile = single(parsed, "o")
      val ccfiles = multiple?(parsed, "ccfiles", List())
      val ccflags = single?(parsed, "ccflags", false)
      call-cc(asmfile as String, outfile, ccfiles, ccflags)

   ;Delete assembly file
   if temporary? :
      delete-file(asmfile as String)


;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-platform(single(parsed, "platform"))
   
   ;Get installation directory
   val install-dir = match(resolve-path("License.txt")) :
      (path:String) :
         val stz-suffix = norm-path("/License.txt")
         if suffix?(path, stz-suffix) :
            val n = length(stz-suffix)
            path[0 to (length(path) - n)]               
         else :  
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")
         
   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = norm-path("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         match(resolve-path(filepath)) :
            (fullpath:String) :
               val suffix = norm-path("/.stanza")
               if suffix?(fullpath, suffix) :
                  val n = length(suffix)
                  val dir = fullpath[0 to (length(fullpath) - n)]
                  println("Stanza installation finished. Created %_ file." % [fullpath])                  
                  println("Remember to add %_ to your STANZA_CONFIG environment variable." % [dir])                  
               else :
                  throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
            (fullpath:False) :
               throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = norm-path("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")
               
   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

;============================================================
;================== Main Interface ==========================
;============================================================

defn main () :
   val compile-comm = Command("compile", [
                         SingleFlag("s", true),
                         SingleFlag("o", true),
                         SingleFlag("platform", true)
                         MultipleFlag("pkg", true)
                         MultipleFlag("ccfiles", true)
                         MultipleFlag("flags", true)
                         MultipleFlag("pkg-path", true)
                         GreedyFlag("ccflags", true)
                         MarkerFlag("optimize")
                         MarkerFlag("verbose")])
   val install-comm = Command("install", [
                         SingleFlag("platform"),
                         SingleFlag("path", true)])
   val version-comm = Command("version", [])                      
   val comms = [compile-comm, install-comm, version-comm]
   try :      
      val parsed = parse-args(comms, compile-comm, command-line-arguments()[1 to false])
      switch {command(parsed) == _} :
         "compile" : compile(parsed)
         "install" : install(parsed)
         "version" : print-version()         
      ;Return success
      exit(0)
   catch (e:Exception) :
      println(e)
      ;Return failure
      exit(-1)

main()
